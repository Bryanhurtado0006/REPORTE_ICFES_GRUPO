-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.administrador
(
    id_administrador serial NOT NULL,
    nombre_completo character varying(150) COLLATE pg_catalog."default" NOT NULL,
    gmail character varying(100) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(20) COLLATE pg_catalog."default",
    contrasena character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT administrador_pkey PRIMARY KEY (id_administrador),
    CONSTRAINT administrador_gmail_key UNIQUE (gmail)
);

CREATE TABLE IF NOT EXISTS public.casos_practicos
(
    id_casos_practicos serial NOT NULL,
    nombre_caso character varying(100) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    tipo character varying(50) COLLATE pg_catalog."default",
    fecha_inicio date,
    fecha_fin date,
    CONSTRAINT casos_practicos_pkey PRIMARY KEY (id_casos_practicos)
);

CREATE TABLE IF NOT EXISTS public.colegios
(
    id_colegio serial NOT NULL,
    nombre_colegio character varying(150) COLLATE pg_catalog."default",
    direccion character varying(255) COLLATE pg_catalog."default",
    telefono character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT colegios_pkey PRIMARY KEY (id_colegio)
);

CREATE TABLE IF NOT EXISTS public.credenciales_estudiantes
(
    id_credenciales_estudiantes serial NOT NULL,
    "contrase√±a" character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT credenciales_estudiantes_pkey PRIMARY KEY (id_credenciales_estudiantes)
);

CREATE TABLE IF NOT EXISTS public.diagnostico_aprendizaje
(
    id_diagnostico serial NOT NULL,
    id_estudiante integer,
    fecha_realizacion timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    resultado character varying(255) COLLATE pg_catalog."default",
    recomendacion text COLLATE pg_catalog."default",
    CONSTRAINT diagnostico_aprendizaje_pkey PRIMARY KEY (id_diagnostico)
);

CREATE TABLE IF NOT EXISTS public.estadisticas
(
    id_estadistica integer NOT NULL,
    total_usuarios integer,
    usuarios_aprobados integer,
    usuarios_reprobados integer,
    puntaje_promedio numeric(5, 2),
    fecha_estadisticas timestamp without time zone,
    numero_documento character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT estadisticas_pkey PRIMARY KEY (id_estadistica)
);

CREATE TABLE IF NOT EXISTS public.estudiantes
(
    id_numero_documento serial NOT NULL,
    nombre_completo character varying(150) COLLATE pg_catalog."default",
    fecha_nacimiento date,
    tipo_documento character varying(50) COLLATE pg_catalog."default",
    numero_documento character varying(50) COLLATE pg_catalog."default",
    gmail character varying(100) COLLATE pg_catalog."default",
    telefono character varying(20) COLLATE pg_catalog."default",
    contrasena character varying(255) COLLATE pg_catalog."default",
    id_colegio integer,
    CONSTRAINT estudiantes_pkey PRIMARY KEY (id_numero_documento),
    CONSTRAINT estudiantes_numero_documento_key UNIQUE (numero_documento)
);

CREATE TABLE IF NOT EXISTS public.evaluacion
(
    id_evaluacion serial NOT NULL,
    titulo character varying(150) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    fecha_inicio date,
    fecha_fin date,
    CONSTRAINT evaluacion_pkey PRIMARY KEY (id_evaluacion)
);

CREATE TABLE IF NOT EXISTS public.inicio_sesion_administrador
(
    id_inicio_sesion serial NOT NULL,
    id_administrador integer NOT NULL,
    fecha_hora timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    direccion_ip character varying(45) COLLATE pg_catalog."default",
    CONSTRAINT inicio_sesion_administrador_pkey PRIMARY KEY (id_inicio_sesion)
);

CREATE TABLE IF NOT EXISTS public.inicio_sesion_usuario
(
    id_inicio_sesion_usuario serial NOT NULL,
    contrasena character varying(255) COLLATE pg_catalog."default",
    id_estudiante integer,
    CONSTRAINT inicio_sesion_usuario_pkey PRIMARY KEY (id_inicio_sesion_usuario)
);

CREATE TABLE IF NOT EXISTS public.insignias_recompensas
(
    id_insignias_recompensas serial NOT NULL,
    nombre_usuario character varying(100) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    tipo character varying(50) COLLATE pg_catalog."default",
    puntos_otorgados integer,
    fecha_otorgamiento timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    id_estudiante integer,
    CONSTRAINT insignias_recompensas_pkey PRIMARY KEY (id_insignias_recompensas)
);

CREATE TABLE IF NOT EXISTS public.material_estudio
(
    id_materia integer NOT NULL,
    titulo_materia character varying(255) COLLATE pg_catalog."default",
    metodologia text COLLATE pg_catalog."default",
    nivel_dificultad character varying(50) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    tipo_archivo character varying(50) COLLATE pg_catalog."default",
    fecha_subida date,
    hora_subida time without time zone,
    id_modo_aprendizaje integer,
    CONSTRAINT material_estudio_pkey PRIMARY KEY (id_materia)
);

CREATE TABLE IF NOT EXISTS public.modos_aprendizaje
(
    id_modo_aprendizaje integer NOT NULL,
    nombre_modo character varying(255) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    CONSTRAINT modos_aprendizaje_pkey PRIMARY KEY (id_modo_aprendizaje)
);

CREATE TABLE IF NOT EXISTS public.participantes
(
    id_participantes serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default",
    correo character varying(100) COLLATE pg_catalog."default",
    fecha_registro timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT participantes_pkey PRIMARY KEY (id_participantes)
);

CREATE TABLE IF NOT EXISTS public.preguntas
(
    id_preguntas serial NOT NULL,
    pregunta text COLLATE pg_catalog."default",
    respuesta_a text COLLATE pg_catalog."default",
    respuesta_b text COLLATE pg_catalog."default",
    respuesta_c text COLLATE pg_catalog."default",
    respuesta_d text COLLATE pg_catalog."default",
    respuesta_correcta character(1) COLLATE pg_catalog."default",
    CONSTRAINT preguntas_pkey PRIMARY KEY (id_preguntas)
);

CREATE TABLE IF NOT EXISTS public.preguntas_diagnostico
(
    id_pregunta serial NOT NULL,
    pregunta text COLLATE pg_catalog."default",
    tipo_pregunta character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT preguntas_diagnostico_pkey PRIMARY KEY (id_pregunta)
);

CREATE TABLE IF NOT EXISTS public.ranking
(
    id_ranking integer NOT NULL,
    nombre_usuario character varying(255) COLLATE pg_catalog."default",
    puntos_totales integer,
    posicion integer,
    fecha_actualizacion timestamp without time zone,
    id_estudiante integer,
    CONSTRAINT ranking_pkey PRIMARY KEY (id_ranking)
);

CREATE TABLE IF NOT EXISTS public.respuestas
(
    id_respuestas serial NOT NULL,
    respuestas_usuario text COLLATE pg_catalog."default",
    fecha_respuesta timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    id_pregunta integer,
    id_estudiante integer,
    CONSTRAINT respuestas_pkey PRIMARY KEY (id_respuestas)
);

CREATE TABLE IF NOT EXISTS public.respuestas_diagnostico
(
    id_respuesta serial NOT NULL,
    id_diagnostico integer,
    id_pregunta integer,
    respuesta text COLLATE pg_catalog."default",
    CONSTRAINT respuestas_diagnostico_pkey PRIMARY KEY (id_respuesta)
);

CREATE TABLE IF NOT EXISTS public.resultados
(
    id_resultado integer NOT NULL,
    puntaje_total integer,
    fecha_resultado timestamp without time zone,
    estado character varying(50) COLLATE pg_catalog."default",
    id_estudiante integer,
    CONSTRAINT resultados_pkey PRIMARY KEY (id_resultado)
);

CREATE TABLE IF NOT EXISTS public.retos
(
    id_retos integer NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    fecha_inicio date,
    fecha_fin date,
    CONSTRAINT retos_pkey PRIMARY KEY (id_retos)
);

CREATE TABLE IF NOT EXISTS public.retos_juegos
(
    id_reto_juegos integer NOT NULL,
    nombre_reto character varying(255) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    tipo character varying(100) COLLATE pg_catalog."default",
    fecha_inicio date,
    fecha_fin date,
    estado character varying(50) COLLATE pg_catalog."default",
    id_reto integer,
    CONSTRAINT retos_juegos_pkey PRIMARY KEY (id_reto_juegos)
);

CREATE TABLE IF NOT EXISTS public.seguimiento
(
    id_seguimiento integer NOT NULL,
    simulacro text COLLATE pg_catalog."default",
    nivel_dificultad character varying(50) COLLATE pg_catalog."default",
    ajuste_seguimiento text COLLATE pg_catalog."default",
    recomendacion text COLLATE pg_catalog."default",
    recordatorio text COLLATE pg_catalog."default",
    id_estudiante integer,
    CONSTRAINT seguimiento_pkey PRIMARY KEY (id_seguimiento)
);

CREATE TABLE IF NOT EXISTS public.seleccion_aprendizaje
(
    id_seleccion_aprendizaje integer NOT NULL,
    fecha_seleccion timestamp without time zone,
    numero_documento character varying(50) COLLATE pg_catalog."default",
    id_modo_aprendizaje integer,
    CONSTRAINT seleccion_aprendizaje_pkey PRIMARY KEY (id_seleccion_aprendizaje)
);

CREATE TABLE IF NOT EXISTS public.simulacro
(
    id_simulacro integer NOT NULL,
    tiempo_limite integer,
    simulacro text COLLATE pg_catalog."default",
    pregunta text COLLATE pg_catalog."default",
    observacion_respuesta text COLLATE pg_catalog."default",
    CONSTRAINT simulacro_pkey PRIMARY KEY (id_simulacro)
);

ALTER TABLE IF EXISTS public.credenciales_estudiantes
    ADD CONSTRAINT fk_credenciales_estudiantes FOREIGN KEY (id_credenciales_estudiantes)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS credenciales_estudiantes_pkey
    ON public.credenciales_estudiantes(id_credenciales_estudiantes);


ALTER TABLE IF EXISTS public.diagnostico_aprendizaje
    ADD CONSTRAINT diagnostico_aprendizaje_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.diagnostico_aprendizaje
    ADD CONSTRAINT fk_diagnostico_estudiante FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.estadisticas
    ADD CONSTRAINT fk_estadisticas_estudiante FOREIGN KEY (numero_documento)
    REFERENCES public.estudiantes (numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.estadisticas
    ADD CONSTRAINT fk_estudiante FOREIGN KEY (numero_documento)
    REFERENCES public.estudiantes (numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.estudiantes
    ADD CONSTRAINT estudiantes_id_colegio_fkey FOREIGN KEY (id_colegio)
    REFERENCES public.colegios (id_colegio) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.estudiantes
    ADD CONSTRAINT fk_estudiantes_colegios FOREIGN KEY (id_colegio)
    REFERENCES public.colegios (id_colegio) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.inicio_sesion_administrador
    ADD CONSTRAINT fk_inicio_sesion_administrador FOREIGN KEY (id_administrador)
    REFERENCES public.administrador (id_administrador) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.inicio_sesion_administrador
    ADD CONSTRAINT inicio_sesion_administrador_id_administrador_fkey FOREIGN KEY (id_administrador)
    REFERENCES public.administrador (id_administrador) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.inicio_sesion_usuario
    ADD CONSTRAINT fk_inicio_sesion_usuario FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.insignias_recompensas
    ADD CONSTRAINT fk_insignias_estudiante FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.insignias_recompensas
    ADD CONSTRAINT insignias_recompensas_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.material_estudio
    ADD CONSTRAINT fk_material_modo FOREIGN KEY (id_modo_aprendizaje)
    REFERENCES public.modos_aprendizaje (id_modo_aprendizaje) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.material_estudio
    ADD CONSTRAINT fk_material_modo_aprendizaje FOREIGN KEY (id_modo_aprendizaje)
    REFERENCES public.modos_aprendizaje (id_modo_aprendizaje) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ranking
    ADD CONSTRAINT fk_ranking_estudiante FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ranking
    ADD CONSTRAINT ranking_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.respuestas
    ADD CONSTRAINT fk_respuestas_estudiante FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas
    ADD CONSTRAINT fk_respuestas_pregunta FOREIGN KEY (id_pregunta)
    REFERENCES public.preguntas (id_preguntas) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_diagnostico
    ADD CONSTRAINT fk_respuestas_diagnostico FOREIGN KEY (id_diagnostico)
    REFERENCES public.diagnostico_aprendizaje (id_diagnostico) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_diagnostico
    ADD CONSTRAINT fk_respuestas_pregunta_diagnostico FOREIGN KEY (id_pregunta)
    REFERENCES public.preguntas_diagnostico (id_pregunta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_diagnostico
    ADD CONSTRAINT respuestas_diagnostico_id_diagnostico_fkey FOREIGN KEY (id_diagnostico)
    REFERENCES public.diagnostico_aprendizaje (id_diagnostico) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_diagnostico
    ADD CONSTRAINT respuestas_diagnostico_id_pregunta_fkey FOREIGN KEY (id_pregunta)
    REFERENCES public.preguntas_diagnostico (id_pregunta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.resultados
    ADD CONSTRAINT resultados_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.retos_juegos
    ADD CONSTRAINT fk_retos_juegos FOREIGN KEY (id_reto)
    REFERENCES public.retos (id_retos) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.seguimiento
    ADD CONSTRAINT seguimiento_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiantes (id_numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.seleccion_aprendizaje
    ADD CONSTRAINT fk_seleccion_estudiante FOREIGN KEY (numero_documento)
    REFERENCES public.estudiantes (numero_documento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.seleccion_aprendizaje
    ADD CONSTRAINT fk_seleccion_modo FOREIGN KEY (id_modo_aprendizaje)
    REFERENCES public.modos_aprendizaje (id_modo_aprendizaje) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;